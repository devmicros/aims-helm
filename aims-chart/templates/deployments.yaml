apiVersion: v1
items:
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
    generation: 5
    name: aims-db
    namespace:  {{ .Values.namespace }}
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: aims-db
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: aims-db
      spec:
        containers:
        - env:
          - name: POSTGRESQL_DATABASE
            value: aims
          - name: POSTGRESQL_PASSWORD
            value: microsafe.2022
          - name: POSTGRESQL_EXTRA_FLAGS
            value: --max_connections=600 --shared_buffers=80MB
          image: devmicrosafe/aims-db@sha256:c7c59c7074b8482988ea04616055323c1d31606084c45100a5e9708c86de543b
          imagePullPolicy: IfNotPresent
          name: aims-db
          securityContext:
            runAsNonRoot: true
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            seccompProfile:
              type: RuntimeDefault
          ports:
          - containerPort: 5432
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /docker-entrypoint-preinitdb.d
            name: aims-db-3
          - mountPath: /docker-entrypoint-initdb.d
            name: aims-db-2
          - mountPath: /bitnami/postgresql
            name: aims-db-1
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        terminationGracePeriodSeconds: 30
        securityContext: {}
        volumes:
        - emptyDir: {}
          name: aims-db-3
        - name: aims-db-2
          persistentVolumeClaim:
            claimName: aims-init-storage
        - name: aims-db-1
          persistentVolumeClaim:
            claimName: aims-db-storage
        - emptyDir: {}
          name: default-token-l4tgm
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "4"
    generation: 4
    name: aims-gql
    namespace:  {{ .Values.namespace }}
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: aims-gql
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: aims-gql
      spec:
        containers:
        - env:
          - name: POSTGRESQL_URL
            value: postgres://postgres:microsafe.2022@aims-db/aims
          image: devmicrosafe/aims-gql@sha256:9f1effb9d495f2a22cd6088634865bbba977483b2f07c5ca5f06cb5e65877fa5
          imagePullPolicy: IfNotPresent
          name: aims-gql
          securityContext:
            runAsNonRoot: true
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            seccompProfile:
              type: RuntimeDefault
          ports:
          - containerPort: 5430
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        terminationGracePeriodSeconds: 30
        securityContext: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "9"
    generation: 11
    name: aims-http
    namespace:  {{ .Values.namespace }}
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: aims-http
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: aims-http
      spec:
        containers:
        - env:
          - name: GRAPHQL_URL
            value: http://aims-gql.microsafe.com.mx
          - name: AIMSWS_URL
            value: http://aims-ws.microsafe.com.mx
          image: devmicrosafe/aims-http@sha256:aaf18d31e0c6e5c2eb399d0eaad3c83f6a8aa3512467badeee8f944d01aaa10e
          imagePullPolicy: IfNotPresent
          name: aims-http
          securityContext:
            runAsNonRoot: true
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            seccompProfile:
              type: RuntimeDefault
          ports:
          - containerPort: 8080
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        terminationGracePeriodSeconds: 30
        securityContext: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "4"
    generation: 4
    name: aims-ws
    namespace:  {{ .Values.namespace }}
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: aims-ws
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: aims-ws
      spec:
        containers:
        - env:
          - name: AIMSWS_PORT
            value: "8081"
          - name: POSTGRESQL_URL
            value: postgres://postgres:microsafe.2022@aims-db/aims
          - name: EMAIL_SERV_URL
            value: email://user:pass@host:port/sender_account@server.com
          - name: AIMSAPP_URL
            value: http://aims-http.microsafe.com.mx
          - name: GRAPHQL_URL
            value: http://aims-gql.microsafe.com.mx
          image: devmicrosafe/aims-ws@sha256:d386f3e3ac5f8fa359a62ab73234b225336f1019b08ce06d432a796a64956d5e
          imagePullPolicy: IfNotPresent
          name: aims-ws
          securityContext:
            runAsNonRoot: true
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            seccompProfile:
              type: RuntimeDefault
          ports:
          - containerPort: 8081
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        terminationGracePeriodSeconds: 30
        securityContext: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
    generation: 1
    name: comm-db
    namespace:  {{ .Values.namespace }}
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: comm-db
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: comm-db
      spec:
        containers:
        - env:
          - name: POSTGRESQL_DATABASE
            value: aimsdata
          - name: POSTGRESQL_PASSWORD
            value: microsafe.2022
          - name: POSTGRESQL_EXTRA_FLAGS
            value: --max_connections=600 --shared_buffers=80MB
          image: devmicrosafe/comm-db@sha256:63ff63c1df596d72faa92f9c84984f7198b863d7f54c273f59b05f282bc573e3
          imagePullPolicy: IfNotPresent
          name: comm-db
          securityContext:
            runAsNonRoot: true
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            seccompProfile:
              type: RuntimeDefault
          ports:
          - containerPort: 5432
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /docker-entrypoint-preinitdb.d
            name: comm-db-3
          - mountPath: /docker-entrypoint-initdb.d
            name: comm-db-2
          - mountPath: /bitnami/postgresql
            name: comm-db-1
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        terminationGracePeriodSeconds: 30
        securityContext: {}
        volumes:
        - emptyDir: {}
          name: comm-db-3
        - name: comm-db-2
          persistentVolumeClaim:
            claimName: comm-init-storage
        - name: comm-db-1
          persistentVolumeClaim:
            claimName: comm-db-storage
        - emptyDir: {}
          name: default-token-l4tgm
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "3"
    generation: 3
    name: comm-ws
    namespace:  {{ .Values.namespace }}
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: comm-ws
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: comm-ws
      spec:
        containers:
        - env:
          - name: COMMWS_PORT
            value: "9000"
          - name: POSTGRESQL_APP_URL
            value: postgres://postgres:microsafe.2022@aims-db/aims
          - name: POSTGRESQL_TRN_URL
            value: postgres://postgres:microsafe.2022@comm-db/aimsdata
          image: devmicrosafe/comm-ws@sha256:c73897364cee902c2ab313cf35dd5c3dcd5e99e33c8542031e4729fb0ea1afa4
          imagePullPolicy: IfNotPresent
          name: comm-ws
          securityContext:
            runAsNonRoot: true
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            seccompProfile:
              type: RuntimeDefault
          ports:
          - containerPort: 9000
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        terminationGracePeriodSeconds: 30
        securityContext: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "3"
    generation: 3
    name: data-svc
    namespace:  {{ .Values.namespace }}
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: data-svc
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: data-svc
      spec:
        containers:
        - env:
          - name: POSTGRESQL_APP_URL
            value: postgres://postgres:microsafe.2022@aims-db/aims
          - name: POSTGRESQL_TRN_URL
            value: postgres://postgres:microsafe.2022@comm-db/aimsdata
          image: devmicrosafe/data-svc@sha256:8eb722c04209e966fc36aebaadbc105601d84003c27ddcd09efc4e4df37a77f6
          imagePullPolicy: IfNotPresent
          name: data-svc
          securityContext:
            runAsNonRoot: true
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            seccompProfile:
              type: RuntimeDefault
          ports:
          - containerPort: 9001
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        terminationGracePeriodSeconds: 30
        securityContext: {}
kind: List
metadata:
  resourceVersion: ""
