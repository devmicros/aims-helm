apiVersion: v1
items:
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
    generation: 5
    name: aims-db
    namespace:  {{ .Values.namespace }}
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: aims-db
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: aims-db
      spec:
        containers:
        - env:
          - name: POSTGRESQL_DATABASE
            value: aims
          - name: POSTGRESQL_PASSWORD
            value: microsafe.2022
          - name: POSTGRESQL_EXTRA_FLAGS
            value: --max_connections=600 --shared_buffers=80MB
          image: devmicrosafe/aims-db@sha256:d1009cd612d38b7ad3820f390f533eb641744244122683f1802a82ce1e215a55
          imagePullPolicy: IfNotPresent
          name: aims-db
          securityContext:
            runAsNonRoot: true
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            seccompProfile:
              type: RuntimeDefault
          ports:
          - containerPort: 5432
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /docker-entrypoint-preinitdb.d
            name: aims-db-3
          - mountPath: /docker-entrypoint-initdb.d
            name: aims-db-2
          - mountPath: /bitnami/postgresql
            name: aims-db-1
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        terminationGracePeriodSeconds: 30
        securityContext: {}
        volumes:
        - emptyDir: {}
          name: aims-db-3
        - name: aims-db-2
          persistentVolumeClaim:
            claimName: aims-init-storage
        - name: aims-db-1
          persistentVolumeClaim:
            claimName: aims-db-storage
        - emptyDir: {}
          name: default-token-l4tgm
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "4"
    generation: 4
    name: aims-gql
    namespace:  {{ .Values.namespace }}
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: aims-gql
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: aims-gql
      spec:
        containers:
        - env:
          - name: POSTGRESQL_URL
            value: postgres://postgres:microsafe.2022@aims-db/aims
          image: devmicrosafe/aims-gql@sha256:cf2cdaf1d36a013fcffeeecbbc68162f034e25f4e3f56d814b1c0e139e11b13b
          imagePullPolicy: IfNotPresent
          name: aims-gql
          securityContext:
            runAsNonRoot: true
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            seccompProfile:
              type: RuntimeDefault
          ports:
          - containerPort: 5430
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        terminationGracePeriodSeconds: 30
        securityContext: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "9"
    generation: 11
    name: aims-http
    namespace:  {{ .Values.namespace }}
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: aims-http
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: aims-http
      spec:
        containers:
        - env:
          - name: GRAPHQL_URL
            value: http://aims-gql.microsafe.com.mx
          - name: AIMSWS_URL
            value: http://aims-ws.microsafe.com.mx
          image: devmicrosafe/aims-http@sha256:cd55b25fc22224bdea965c969c886814bc20e774ddd7f0d62faf12d0a3f09548
          imagePullPolicy: IfNotPresent
          name: aims-http
          securityContext:
            runAsNonRoot: true
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            seccompProfile:
              type: RuntimeDefault
          ports:
          - containerPort: 8080
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        terminationGracePeriodSeconds: 30
        securityContext: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "4"
    generation: 4
    name: aims-ws
    namespace:  {{ .Values.namespace }}
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: aims-ws
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: aims-ws
      spec:
        containers:
        - env:
          - name: AIMSWS_PORT
            value: "8081"
          - name: POSTGRESQL_URL
            value: postgres://postgres:microsafe.2022@aims-db/aims
          - name: EMAIL_SERV_URL
            value: email://user:pass@host:port/sender_account@server.com
          - name: AIMSAPP_URL
            value: http://aims-http.microsafe.com.mx
          - name: GRAPHQL_URL
            value: http://aims-gql.microsafe.com.mx
          image: devmicrosafe/aims-ws@sha256:ead03b4531d225861d8e1b55e0348776192d42c5b150f0b7221d6f46e8bdf411
          imagePullPolicy: IfNotPresent
          name: aims-ws
          securityContext:
            runAsNonRoot: true
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            seccompProfile:
              type: RuntimeDefault
          ports:
          - containerPort: 8081
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        terminationGracePeriodSeconds: 30
        securityContext: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
    generation: 1
    name: comm-db
    namespace:  {{ .Values.namespace }}
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: comm-db
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: comm-db
      spec:
        containers:
        - env:
          - name: POSTGRESQL_DATABASE
            value: aimsdata
          - name: POSTGRESQL_PASSWORD
            value: microsafe.2022
          - name: POSTGRESQL_EXTRA_FLAGS
            value: --max_connections=600 --shared_buffers=80MB
          image: devmicrosafe/comm-db@sha256:72e7cf5d4f541cf8167bc55c09d51b8ae9d7e61b8ebec844eca7ab61078f417e
          imagePullPolicy: IfNotPresent
          name: comm-db
          securityContext:
            runAsNonRoot: true
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            seccompProfile:
              type: RuntimeDefault
          ports:
          - containerPort: 5432
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /docker-entrypoint-preinitdb.d
            name: comm-db-3
          - mountPath: /docker-entrypoint-initdb.d
            name: comm-db-2
          - mountPath: /bitnami/postgresql
            name: comm-db-1
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        terminationGracePeriodSeconds: 30
        securityContext: {}
        volumes:
        - emptyDir: {}
          name: comm-db-3
        - name: comm-db-2
          persistentVolumeClaim:
            claimName: comm-init-storage
        - name: comm-db-1
          persistentVolumeClaim:
            claimName: comm-db-storage
        - emptyDir: {}
          name: default-token-l4tgm
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "3"
    generation: 3
    name: comm-svc
    namespace:  {{ .Values.namespace }}
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: comm-svc
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: comm-svc
      spec:
        containers:
        - env:
          - name: COMMWS_PORT
            value: "9000"
          - name: POSTGRESQL_APP_URL
            value: postgres://postgres:microsafe.2022@aims-db/aims
          - name: POSTGRESQL_TRN_URL
            value: postgres://postgres:microsafe.2022@comm-db/aimsdata
          image: devmicrosafe/comm-svc@sha256:5e5570775a9646a63d6be4b45112122e0cba1e10f1ec3aedb92b5843273c8ced
          imagePullPolicy: IfNotPresent
          name: comm-svc
          securityContext:
            runAsNonRoot: true
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            seccompProfile:
              type: RuntimeDefault
          ports:
          - containerPort: 9000
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        terminationGracePeriodSeconds: 30
        securityContext: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "3"
    generation: 3
    name: data-svc
    namespace:  {{ .Values.namespace }}
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: data-svc
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: data-svc
      spec:
        containers:
        - env:
          - name: POSTGRESQL_APP_URL
            value: postgres://postgres:microsafe.2022@aims-db/aims
          - name: POSTGRESQL_TRN_URL
            value: postgres://postgres:microsafe.2022@comm-db/aimsdata
          image: devmicrosafe/data-svc@sha256:4850a079e2aae2fde2b15e53d633d4b36b506c638207ccf05b913ee1d5ac0fe2
          imagePullPolicy: IfNotPresent
          name: data-svc
          securityContext:
            runAsNonRoot: true
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            seccompProfile:
              type: RuntimeDefault
          ports:
          - containerPort: 9001
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        terminationGracePeriodSeconds: 30
        securityContext: {}
kind: List
metadata:
  resourceVersion: ""
